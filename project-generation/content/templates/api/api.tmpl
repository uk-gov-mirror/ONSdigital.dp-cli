package api

import (
    "github.com/ONSdigital/go-ns/healthcheck"
    "github.com/ONSdigital/go-ns/server"
    "github.com/ONSdigital/log.go/log"
    "github.com/gorilla/mux"
    "github.com/justinas/alice"
)

var httpServer *server.Server

type API struct {
    router *mux.Router
}

func CreateAndInitialise(cfg config.Config, errorChan chan) {
    router := mux.NewRouter()
    
    healthCheckHandler := healcheck.NewMiddleware(healthCheck.do)
    middleware := alice.New(healthCheckHandler)

    httpServer = server.New(cfg.BindAddr, middleware.Then(router))

    // Disable this here to allow main to manage graceful shutdown of the entire app.
    httpServer.HandleOSSignals = false

    go func() {
        log.Debug("Starting api...", nil)
        if err := httpServer.ListenAndServe(); err != nil {
            log.ErrorC("api http server returned error", err, nil)
            errorChan <- err
        }
}

func routes(router *mux.Router) *API {
    api := API{router: router}
    
}