package api

import (
	"context"
	"fmt"
	"net/http"

	"github.com/ONSdigital/go-ns/healthcheck"
	"github.com/ONSdigital/go-ns/server"

	"github.com/ONSdigital/log.go/log"
	"github.com/gorilla/mux"
	"github.com/justinas/alice"
)

var httpServer *server.Server

//  TestAPI:  struct with baseline defaults
type TestAPI struct {
	router     *mux.Router
	middleware http.Handler
}

// CreateAndInitialise manages all the routes configured to the API
func CreateAndInitialise() *TestAPI {
	router := mux.NewRouter()
	api := BuildAPI(router)

	return api

}

// BuildAPI builds routes and middleware
func BuildAPI(router *mux.Router) *TestAPI {

	healthCheckHandler := healthcheck.NewMiddleware(healthcheck.Do)
	middlewareChain := alice.New(healthCheckHandler)

	alice := middlewareChain.Then(router)
	apiBuild := TestAPI{router: router, middleware: alice}

	// Generic hello world endpoint
	apiBuild.router.HandleFunc("/hello", getHelloHandler).Methods("GET")

	return &apiBuild

}

func getHelloHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello world")
}

// Close represents the graceful shutting down of the http server
func Close(ctx context.Context) error {
	if err := httpServer.Shutdown(ctx); err != nil {
		return err
	}
	// log.InfoCtx(ctx, "graceful shutdown of http server complete", nil)
	return nil
}
